%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Large Colored Title Article
% LaTeX Template
% Version 1.1 (25/11/12)
%
% This template has been downloaded from:
% http://www.LaTeXTemplates.com
%
% Original author:
% Frits Wenneker (http://www.howtotex.com)
%
% License:
% CC BY-NC-SA 3.0 (http://creativecommons.org/licenses/by-nc-sa/3.0/)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%----------------------------------------------------------------------------------------
%	PACKAGES AND OTHER DOCUMENT CONFIGURATIONS
%----------------------------------------------------------------------------------------

\documentclass[DIV=calc, paper=a4, fontsize=10pt, twocolumn]{scrartcl}	 % A4 paper and 11pt font size

\usepackage{lipsum} % Used for inserting dummy 'Lorem ipsum' text into the template
\usepackage{url}
\usepackage{natbib}
\usepackage[english]{babel} % English language/hyphenation
\usepackage[protrusion=true,expansion=true]{microtype} % Better typography
\usepackage{amsmath,amsfonts,amsthm} % Math packages
\usepackage[svgnames]{xcolor} % Enabling colors by their 'svgnames'
\usepackage[hang, small,labelfont=bf,up,textfont=it,up]{caption} % Custom captions under/above floats in tables or figures
\usepackage{booktabs} % Horizontal rules in tables
\usepackage{fix-cm}	 % Custom font sizes - used for the initial letter in the document
\usepackage{natbib}
\usepackage{sectsty} % Enables custom section titles
\allsectionsfont{\usefont{OT1}{phv}{b}{n}} % Change the font of all section commands

\usepackage{fancyhdr} % Needed to define custom headers/footers
\pagestyle{fancy} % Enables the custom headers/footers
\usepackage{lastpage} % Used to determine the number of pages in the document (for "Page X of Total")

% Headers - all currently empty
\lhead{}
\chead{\emph{Vizualizing the African Slave Trade, 1514 - 1866}}
\rhead{}

% Footers
\lfoot{}
\cfoot{}
\rfoot{\footnotesize Page \thepage\ of \pageref{LastPage}} % "Page 1 of 2"

\renewcommand{\headrulewidth}{0.0pt} % No header rule
\renewcommand{\footrulewidth}{0.4pt} % Thin footer rule

\usepackage{lettrine} % Package to accentuate the first letter of the text
\newcommand{\initial}[1]{ % Defines the command and style for the first letter
\lettrine[lines=3,lhang=0.3,nindent=0em]{
\color{black}
{\textsf{#1}}}{}}
\usepackage{color}
\definecolor{purple}{rgb}{.4,0,.8}
\newcommand{\hh}[1]{{\color{magenta} #1}}
\newcommand{\st}[1]{{\color{purple} #1}}

%----------------------------------------------------------------------------------------
%	TITLE SECTION
%----------------------------------------------------------------------------------------

\usepackage{titling} % Allows custom title configuration

\newcommand{\HorRule}{\color{black} \rule{\linewidth}{1pt}} % Defines the gold horizontal rule around the title

\pretitle{\vspace{-50pt} \begin{flushleft} \HorRule \fontsize{20}{20} \usefont{OT1}{phv}{b}{n} \color{black} \selectfont} % Horizontal rule before the title

\title{Vizualizing the African Slave Trade, 1514 - 1866} % Your article title
 % This should probably reference geomnet. Don't want it to be too long though
\posttitle{\par\end{flushleft}\vskip 0em} % Whitespace under the title

\preauthor{\begin{flushleft}\large \vspace{-.5cm} \usefont{OT1}{phv}{b}{sl} \color{black}} % Author font configuration

\author{Sam Tyner, } % Your name

\postauthor{\footnotesize \usefont{OT1}{phv}{m}{sl} \color{Black} % Configuration for the institution name
Iowa State University % Your institution

\par\end{flushleft} \vspace{-.5cm} \HorRule \vspace{-1cm}} % Horizontal rule after the title
\date{} % Add a date here if you would like one to appear underneath the title block

%----------------------------------------------------------------------------------------

\begin{document}

\maketitle % Print the title

\thispagestyle{fancy} % Enabling the custom headers/footers for the first page 

%----------------------------------------------------------------------------------------
%	ABSTRACT
%----------------------------------------------------------------------------------------

% The first character should be within \initial{}
\vspace{-1cm}
\initial{U}\textbf{sing a new way to visualize network data in \texttt{R} with \texttt{gglot2}, I examine the evolution of the African slave trade from the $16^{th}$ through the $19^{th}$ centuries. \st{XXX I feel like I need more here. Will add more when paper is more fleshed out.}}

%----------------------------------------------------------------------------------------
%	ARTICLE CONTENTS
%----------------------------------------------------------------------------------------

\section*{Introduction}

\st{XXX Need intro. Talk about data source(s), structure, motivation for project, etc. XXX} 

\par The Trans-Atlantic Slave Trade Database, hosted by Emory University, contains information on nearly 35,000 voyages of slave ships from 1514 - 1866 between Europe, Africa, and the Americas \citep{voyages}. The data are extensive, and come chiefly from primary sources, such as ship manifests or family and business records. Although the current host of these data is Emory University, collecting this vital historic data has taken decades. In the last 15 years alone, over 50 individual researchers have contributed data from their own research to help complete this database. 

\par There are 279 variables containing information on the 34,948 voyages. Some of the variables included in the database are the ships' owners, the country of origin of the ship, the number of men, women, and children that were taken from Africa, and the outcome of the voyage. The database also includes information on ships that were wrecked, captured, or never heard from again, so for my visualizations, I only include trips with outcomes where slaves disembarked in the Americas or disembarked in Africa or Europe.  Additionally, due to the inconsistent nature of the historical data sources, there are many missing values, and 22 of the variables are actually imputed.\footnote{See \url{http://www.slavevoyages.org/voyage/understanding-db/methodology-9} for more information on how the imputed variables are derived.} So, in order to fully appreciate the magnitude of this data, I focus on the imputed varibles. By using the most robust variables, I can present the most complete visual analysis of the forced migration of Africans to the Americas.  

\par The website dedicated to exploring this data, \url{www.slavevoyages.org}, also contains a dashboard to view and subset the data. It also hosts a graph builder for simple plots, such as scatterplots, time series, or bar graphs, an interactive map, and an animation of all slave ships leaving Africa and arriving in the Americas. While using these tools, I felt that the interactive map lacked detail. The user of the map can zoom in to see more detail, but by zooming in, you lose the entire journey. The animation shows ships as dots flying across the Atlantic Ocean and arriving in the Americas, but it lacks permanence. Seeing the ships travel across the ocean is very informative, but not very impactful. A similar animiation appeared in Slate Magazine in June 2015 \citep{slate}. Finally, other animations by two researchers at Georgetown University show the cumulative frequencies of port of departure, port of slave purchase, and port of slave sale \citep{heatmaps}. The animations are all beautiful, but I think they fail to leave the viewer with a real understanding of the depth and the magnitude of the centuries-long practice of stealing people from their homes and selling them into slavery in foreign countries.    \st{XXX a little preachy? XXX}
%------------------------------------------------

\section*{The \texttt{geomnet} package}

\par To view the Trans-Atlantic Slave Trade Database in a new way, I use the \texttt{geomnet} package, which can be installed from \url{https://github.com/sctyner/geomnet}.  This package is built on the development version of \texttt{ggplot2}, which can be installed from \url{https://github.com/hadley/ggplot2}.  

\par The key function in \texttt{geomnet} is a new \texttt{geom} for \texttt{ggplot2}, \texttt{geom\_net()}.  The major advantage of using this new \texttt{geom} over other network packages like \texttt{network} or \texttt{igraph} is the data format required \citep{network, igraph}. To visualize networks using the current capabilities in those pacakges, the user needs to be intimately familiar with the structure of network data and how to manipulate it. The data required for \texttt{geomnet}, however, is just a data frame, like all \texttt{ggplot2} functions require. This is a major advantage for the users who find themselves with network data but have little or no experience with it. 

\par \st{XXX insert paragraph about data structure XXX}

\par Visualizing networks with \texttt{geom\_net} will feel very natural to users already familiar with \texttt{ggplot2}.  The arguments to pass to this function are 
  \begin{itemize}
  \item \texttt{directed}: a logical value to indicate whether the network is directed (default is \texttt{FALSE});
  \item \texttt{layout}: layout to use, from \texttt{gplot.layout.()} in \texttt{sna} (default is \texttt{Kamada-Kawai} \citep{kamadakawai}); 
  \item \texttt{layout.par}: parameters to pass to layout function, see \texttt{?gplot.layout} for more;
  \item \texttt{curvature}: a value to indicate how much to curve the edges (default is 0);
  \item \texttt{fiteach}: if using facetting, a logical value indicating whether to use the same or different layout to each panel (default is \texttt{TRUE});
  \item \texttt{arrowsize}: if \texttt{directed = TRUE}, use this parameter to change the size of the arrowhead by a numeric multiple;
  \item \texttt{arrowgap}: if \texttt{directed = TRUE}, use this parameter to avoid overplotting of arrowheads by shrinking the length of the edge by a small amount (e.g. \texttt{arrowgap = 0.05});
  \item \texttt{selfies}: if a network contains self-referencing edges, where from and to node are identical, then set \texttt{selfies = TRUE} to view these edges;
  \item \texttt{label}: can be a logical value or a data variable. If set to \texttt{TRUE}, the node names are used to label the nodes. If set to a data variable, the variable should be a character variable of names with which to label nodes. Position can be adjusted with \texttt{hjust} or \texttt{vjust};
  \end{itemize}
The required aesthetic options are 
  \begin{itemize}
  \item \texttt{from\_id}: the column containing the first node describing an edge in the network, and
  \item \texttt{to\_id}: the column containing the second node describing an edge in the network.
  \end{itemize}
  Other aesthetic options available to the user, besides the usual options for \texttt{geom\_point} and \texttt{geom\_segment}, are
  \begin{itemize}
  \item \texttt{x} and \texttt{y}: if \texttt{layout = NULL}, \texttt{x} and \texttt{y} set the locations of the nodes (e.g. longitude and latitude)
  \end{itemize}

%-----------------------------------------------------------------------------  
\section*{Visualizing the data}  

\st{XXX show yearly breakdowns, country breakdowns, etc. }

<<setup, echo=FALSE>>=
datadir=".."

@

<<dat_read_clean,echo=FALSE, cache=TRUE, message=FALSE,warning=FALSE>>=
library(foreign)
st <- read.spss(file.path(datadir, "tastdb-exp-2010.sav"))
labels <- attr(st, "label.table")
fulldata <- data.frame(st)
completes <- which(fulldata$fate2 %in% c("Slaves disembarked Americas", "Slaves disembarked in Africa/Europe"))

# 'ptdepimp'=origin port of ship, 'mjbyptimp'=port where slaves taken aboard, 'mjslptimp'=port where slaves were left, 'slaximp'= # slaves departed from africa, 'slamimp'= # slaves arrived in americas,  'natinimp'=nation of ship

from_to <- na.omit(fulldata[completes,c('voyageid','ptdepimp', 'mjbyptimp', 'mjslptimp', 'slaximp', 'slamimp', 'natinimp')])

library(dplyr)
library(magrittr)
from_to$ptdepimp %<>% as.character
from_to$mjbyptimp %<>% as.character
from_to$mjslptimp %<>% as.character

json_file <- file.path(datadir, "locations_json.txt")
json_data <- rjson::fromJSON(file=json_file)
loc.type <- NULL
for (i in 1:931){
  type1 <- plyr::ldply(json_data[[i]][[2]])
  loc.type <- rbind(loc.type, type1)
}

broadregion.idx <- which(loc.type[,1] == 'voyage.broadregion')
place.idx <- which(loc.type[,1] == 'voyage.place')
region.idx <- which(loc.type[,1] == 'voyage.region')

broadregion.info <- NULL
for (i in broadregion.idx){
  info <- plyr::ldply(json_data[[i]][[3]])
  broadregion.info <- rbind(broadregion.info, info)
}

broadregion.info %<>% arrange(.id)
broadregion.info2 <- data.frame(value = broadregion.info[29:35,2], location.type = 'broad_region', location.name = broadregion.info[1:7,2],
                                latitude = broadregion.info[8:14,2], longitude = broadregion.info[15:21,2])

place.info <- NULL
for (i in place.idx){
  info <- plyr::ldply(json_data[[i]][[3]])
  place.info <- rbind(place.info, info)
}
place.info %<>% arrange(.id)
place.info2 <- data.frame(value = place.info[4993:5824,2], location.type = 'place', location.name = place.info[1665:2496,2],
           latitude = place.info[1:832,2], longitude = place.info[833:1664,2])

region.info <- NULL
for (i in region.idx){
  info <- plyr::ldply(json_data[[i]][[3]])
  region.info <- rbind(region.info, info)
}
region.info %<>% arrange(.id)
region.info2 <- data.frame(value = region.info[553:644,2], location.type = 'region', location.name = region.info[277:368,2],
           latitude = region.info[93:184,2], longitude = region.info[185:276,2])
locations.info <- rbind(broadregion.info2, region.info2, place.info2)
locations.info$value %<>% as.character %<>% as.numeric
locations.info$location.name %<>% as.character
locations.info$longitude %<>% as.character %<>% as.numeric
locations.info$latitude %<>% as.character %<>% as.numeric

from_to$ptdepimp[which(from_to$ptdepimp == "Guadaloupe, port unspecified")] <- "Guadeloupe, port unspecified"
from_to$mjbyptimp[which(from_to$mjbyptimp == "Guadaloupe, port unspecified")] <- "Guadeloupe, port unspecified"
from_to$mjslptimp[which(from_to$mjslptimp == "Guadaloupe, port unspecified")] <- "Guadeloupe, port unspecified"

from_to$ptdepimp[which(from_to$ptdepimp == "St. Paul de Loanda")] <- "St. Paul"
from_to$mjbyptimp[which(from_to$mjbyptimp == "St. Paul de Loanda")] <- "St. Paul"
from_to$mjslptimp[which(from_to$mjslptimp == "St. Paul de Loanda")] <- "St. Paul"

from_to$ptdepimp[which(from_to$ptdepimp == "New York, port unspecified")] <- "New York"
from_to$mjbyptimp[which(from_to$mjbyptimp == "New York, port unspecified")] <- "New York"
from_to$mjslptimp[which(from_to$mjslptimp == "New York, port unspecified")] <- "New York"

from_to$ptdepimp[which(from_to$ptdepimp == "Marseille")] <- "Marseilles"
from_to$mjbyptimp[which(from_to$mjbyptimp == "Marseille")] <- "Marseilles"
from_to$mjslptimp[which(from_to$mjslptimp == "Marseille")] <- "Marseilles"

from_to$ptdepimp[which(from_to$ptdepimp == "Saint John")] <- "Saint John (Antigua)"
from_to$mjbyptimp[which(from_to$mjbyptimp == "Saint John")] <- "Saint John (Antigua)"
from_to$mjslptimp[which(from_to$mjslptimp == "Saint John")] <- "Saint John (Antigua)"

from_to$ptdepimp[which(from_to$ptdepimp == "Senegal")] <- "French Africa (Goree or Senegal)"
from_to$mjbyptimp[which(from_to$mjbyptimp == "Senegal")] <- "French Africa (Goree or Senegal)"
from_to$mjslptimp[which(from_to$mjslptimp == "Senegal")] <- "French Africa (Goree or Senegal)"

from_to$ptdepimp[which(from_to$ptdepimp == "Bance Island")] <- "Bance Island (Ben's Island)"
from_to$mjbyptimp[which(from_to$mjbyptimp == "Bance Island")] <- "Bance Island (Ben's Island)"
from_to$mjslptimp[which(from_to$mjslptimp == "Bance Island")] <- "Bance Island (Ben's Island)"

from_to$ptdepimp[which(from_to$ptdepimp == "Cape Mount")] <- "Cape Mount (Cape Grand Mount)"
from_to$mjbyptimp[which(from_to$mjbyptimp == "Cape Mount")] <- "Cape Mount (Cape Grand Mount)"
from_to$mjslptimp[which(from_to$mjslptimp == "Cape Mount")] <- "Cape Mount (Cape Grand Mount)"

from_to$ptdepimp[which(from_to$ptdepimp == "Anomabu, Adja, Agga")] <- "Anomabu"
from_to$mjbyptimp[which(from_to$mjbyptimp == "Anomabu, Adja, Agga")] <- "Anomabu"
from_to$mjslptimp[which(from_to$mjslptimp == "Anomabu, Adja, Agga")] <- "Anomabu"

from_to$ptdepimp[which(from_to$ptdepimp == "Windward + Ivory + Gold +  Benin")] <- "Windward + Ivory + Gold + Benin"
from_to$mjbyptimp[which(from_to$mjbyptimp == "Windward + Ivory + Gold +  Benin")] <- "Windward + Ivory + Gold + Benin"
from_to$mjslptimp[which(from_to$mjslptimp == "Windward + Ivory + Gold +  Benin")] <- "Windward + Ivory + Gold + Benin"

from_to$ptdepimp[which(from_to$ptdepimp == "Sestos")] <- "Young Sestos"
from_to$mjbyptimp[which(from_to$mjbyptimp == "Sestos")] <- "Young Sestos"
from_to$mjslptimp[which(from_to$mjslptimp == "Sestos")] <- "Young Sestos"

from_to$ptdepimp[which(from_to$ptdepimp == "Côte de Malaguette")] <- "Côte de Malaguette (runs through to Cape Palmas on Windward Coast)"
from_to$mjbyptimp[which(from_to$mjbyptimp == "Côte de Malaguette")] <- "Côte de Malaguette (runs through to Cape Palmas on Windward Coast)"
from_to$mjslptimp[which(from_to$mjslptimp == "Côte de Malaguette")] <- "Côte de Malaguette (runs through to Cape Palmas on Windward Coast)"

from_to$ptdepimp[which(from_to$ptdepimp == "Sugary")] <- "Sugary (Siekere)"
from_to$mjbyptimp[which(from_to$mjbyptimp == "Sugary")] <- "Sugary (Siekere)"
from_to$mjslptimp[which(from_to$mjslptimp == "Sugary")] <- "Sugary (Siekere)"

from_to$ptdepimp[which(from_to$ptdepimp == "Surinam")] <- "Suriname"
from_to$mjbyptimp[which(from_to$mjbyptimp == "Surinam")] <- "Suriname"
from_to$mjslptimp[which(from_to$mjslptimp == "Surinam")] <- "Suriname"

from_to$ptdepimp[which(from_to$ptdepimp == "Newcastle")] <- "Newcastle (Nevis)"
from_to$mjbyptimp[which(from_to$mjbyptimp == "Newcastle")] <- "Newcastle (Nevis)"
from_to$mjslptimp[which(from_to$mjslptimp == "Newcastle")] <- "Newcastle (Nevis)"

from_to$ptdepimp[which(from_to$ptdepimp == "Vera Cruz")] <- "Veracruz"
from_to$mjbyptimp[which(from_to$mjbyptimp == "Vera Cruz")] <- "Veracruz"
from_to$mjslptimp[which(from_to$mjslptimp == "Vera Cruz")] <- "Veracruz"

from_to$ptdepimp[which(from_to$ptdepimp == "Spanish Central America, port unspecified")] <- "Spanish Americas, port unspecified"
from_to$mjbyptimp[which(from_to$mjbyptimp == "Spanish Central America, port unspecified")] <- "Spanish Americas, port unspecified"
from_to$mjslptimp[which(from_to$mjslptimp == "Spanish Central America, port unspecified")] <- "Spanish Americas, port unspecified"

from_to$ptdepimp[which(from_to$ptdepimp == "Santo Domingo, port unspecified")] <- "Saint-Domingue, port unspecified"
from_to$mjbyptimp[which(from_to$mjbyptimp == "Santo Domingo, port unspecified")] <- "Saint-Domingue, port unspecified"
from_to$mjslptimp[which(from_to$mjslptimp == "Santo Domingo, port unspecified")] <- "Saint-Domingue, port unspecified"

from_to$ptdepimp[which(from_to$ptdepimp == "La Guiara")] <- "La Guaira"
from_to$mjbyptimp[which(from_to$mjbyptimp == "La Guiara")] <- "La Guaira"
from_to$mjslptimp[which(from_to$mjslptimp == "La Guiara")] <- "La Guaira"

from_to$ptdepimp[which(from_to$ptdepimp == "Spanish West Indies, colony unspecified")] <- "Spanish Caribbean, unspecified"
from_to$mjbyptimp[which(from_to$mjbyptimp == "Spanish West Indies, colony unspecified")] <- "Spanish Caribbean, unspecified"
from_to$mjslptimp[which(from_to$mjslptimp == "Spanish West Indies, colony unspecified")] <- "Spanish Caribbean, unspecified"

from_to$yeardep <- fulldata$yeardep[which(fulldata$voyageid %in% from_to$voyageid)]
from_to$yearaf <- fulldata$yearaf[which(fulldata$voyageid %in% from_to$voyageid)]
from_to$yearam <- fulldata$yearam[which(fulldata$voyageid %in% from_to$voyageid)]
from_to$sladeath <- from_to$slaximp - from_to$slamimp

from_to <- from_to[-which(from_to$mjslptimp == "???"),]
from_to <- from_to[-grep('074', as.character(from_to$mjbyptimp)),]
from_to$century <- as.numeric(substr(as.character(from_to$yeardep), 1,2)) + 1

ports <- data.frame(name = unique(c(unique(from_to$ptdepimp), unique(from_to$mjbyptimp), unique(from_to$mjslptimp))))

ports <- merge(ports, locations.info, by.x = 'name', by.y = 'location.name')

library(sp)
coords2country = function(points){  
  countriesSP <- rworldmap::getMap(resolution='low')
  # convert our list of points to a SpatialPoints object
  # setting CRS directly to that from rworldmap
  pointsSP = sp::SpatialPoints(points, proj4string=CRS(proj4string(countriesSP)))  
  # use 'over' to get indices of the Polygons object containing each point 
  indices = sp::over(pointsSP, countriesSP)
  # return the ADMIN names of each country
  indices$ADMIN  
}

ports$country <- coords2country(ports[,c('longitude','latitude')])

# function to create a data set appropirate for network plotting. 
# variable, from_id, to_id, node_id need to be characters. value needs to be character or numeric. 
create_net_data2 <- function(edge_data, node_data, variable = NULL, value = NULL, from_id, to_id, node_id){
  if (!is.null(variable) && !is.null(value)){
    idx <- which(edge_data[, variable] %in% value)
    edge_data <- edge_data[idx,]
  } else{edge_data <- edge_data}
  edge_data2 <- edge_data
  edge_data2[,from_id] <- edge_data[,to_id]
  edge_data2[,to_id] <- edge_data[,from_id]
  edge_data <- rbind(edge_data, edge_data2)
  nodes1 <- unique(as.character(edge_data[,from_id]))
  nodes2 <- unique(as.character(edge_data[,to_id]))
  nodes <- unique(c(nodes1, nodes2))
  node_idx <- which(node_data[, node_id] %in% nodes)
  node_data <- node_data[node_idx,]
  net_data <- merge(edge_data, node_data, by.x = from_id, by.y = node_id, all = T)
}
@

<<whole_dataset_plot, echo = FALSE, message=FALSE,warning=FALSE, fig.cap="The entire network of completed slave ship trips from Africa to the Americas from 1519 - 1864.">>=
library(ggplot2)
library(geomnet)

myborders <- function(xlim=c(-105,75), ylim = c(-50,50)) {
  paths <- borders("world", colour="gray50", fill=NA,
          xlim=xlim, ylim = ylim)
  data <- paths$data
  data$long <- pmax(data$long, min(xlim))
  data$long <- pmin(data$long, max(xlim))
  data$lat <- pmax(data$lat, min(ylim))
  data$lat <- pmin(data$lat, max(ylim))
  paths$data <- data
  paths
}

mp <- NULL
#mapWorld <- borders("world", colour="gray50", fill=NA) # create a layer of borders
mapWorld <- myborders(xlim=c(-105,75), ylim = c(-50,50))
mp <- ggplot() +   mapWorld 
theme_set(theme_bw())

slavenet_all <- create_net_data2(edge_data = from_to, node_data = ports, variable = NULL, value = NULL, from_id = "mjbyptimp" , to_id = "mjslptimp", node_id = "name")

# from_to_lat <- merge(from_to, ports[,c("name", "longitude", "latitude")], by.x="mjbyptimp", by.y="name")
# from_to_lat <- merge(from_to_lat, ports[,c("name", "longitude", "latitude")], by.x="mjslptimp", by.y="name")

# didn't work
# slavenet_all2 <- create_net_data(edge_data = from_to_lat, node_data = ports, variable = NULL, value = NULL, from_id = "mjbyptimp" , to_id = "mjslptimp", node_id = "name")


# I think arrowgap is behaving weirdly. color is also behaving weirdly
mp + geom_net(data= slavenet_all, layout = NULL, 
              directed = TRUE, ealpha = .15, arrowgap = 1,
          aes(x=longitude, y = latitude, from_id = mjbyptimp, to_id=mjslptimp,
              color = natinimp)) +
  theme(legend.position = 'bottom') + lims(x = c(-105,75), y = c(-50,50))

# mp + geom_point(data= from_to_lat, aes(x=longitude.x, y = latitude.x)) +
#   geom_point(data= from_to_lat, aes(x=longitude.y, y = latitude.y)) +
#   geom_segment(data= from_to_lat, aes(x=longitude.x, xend=longitude.y, 
#                    y=latitude.x, yend=latitude.y, colour=natinimp), alpha=0.1) +
#   facet_wrap(~natinimp) +
#   theme(legend.position = 'bottom') + lims(x = c(-105,75), y = c(-50,50)) +
#   guides(colour = guide_legend(override.aes = list(alpha=1)))
@

<<biggest_year, echo = FALSE, message=FALSE,warning=FALSE, fig.cap="Slave trade in 1807, the year with the most slave ships arriving in the Americas.">>=
st1807 <- create_net_data2(edge_data = from_to, node_data = ports, variable = "yearam", value = 1807, from_id = "mjbyptimp" , to_id = "mjslptimp", node_id = "name")

mp + geom_net(data= st1807, layout = NULL, directed = TRUE, 
              ealpha = .3, arrowgap = 1,
          aes(x=longitude, y = latitude, from_id = mjbyptimp, to_id=mjslptimp,
              color = natinimp)) + 
  theme(legend.position = 'bottom') + lims(x = c(-105,75), y = c(-50,50))
@

<<gb, echo = FALSE, message=FALSE,warning=FALSE, fig.cap="Slave trade routes run by British ships, 1562-1809.">>=
stgb <- create_net_data2(edge_data = from_to, node_data = ports, variable = "natinimp", value = 'Great Britain', from_id = "mjbyptimp" , to_id = "mjslptimp", node_id = "name")

library(RColorBrewer)
fourcolors <- brewer.pal(4,"YlGnBu")
# How to get edge colors to work??? ecolour = fourcolors[as.numeric(as.factor(stgb$century))]
mp + geom_net(data= stgb, layout = NULL, directed = TRUE, ealpha = .2, arrowgap = 1,
          aes(x=longitude, y = latitude, from_id = mjbyptimp, to_id=mjslptimp,
              color = as.factor(century), group = century)) + 
  theme(legend.position = 'bottom') + lims(x = c(-105,75), y = c(-50,50))
@

<<deaths,echo = FALSE, message=FALSE,warning=FALSE, fig.cap="Visualizing deaths of captives during trip. The wider the edge, the more deaths there were on the voyage.">>=
stdeaths <- create_net_data2(edge_data = subset(from_to, sladeath >=0), node_data = ports, variable = "yearam", value = 1807, from_id = "mjbyptimp" , to_id = "mjslptimp", node_id = "name")

mp + geom_net(data= stdeaths , layout = NULL, directed = TRUE, ealpha = .2, arrowgap = 1,
          aes(x=longitude, y = latitude, from_id = mjbyptimp, to_id=mjslptimp,
              linewidth = sladeath/20)) + 
  theme(legend.position = 'bottom') + lims(x = c(-105,75), y = c(-50,50))
@

\section*{Conclusion}

\st{XXX talk about what I learned from these visualizations, historical importance \& understanding?}
%----------------------------------------------------------------------------------------
%	REFERENCE LIST
%----------------------------------------------------------------------------------------
\bibliographystyle{abbrv}
\bibliography{ASA_SCSG_Paper}

%----------------------------------------------------------------------------------------

\end{document}